{"version":3,"sources":["Recipe.js","App.js","reportWebVitals.js","index.js","recipe.module.css"],"names":["Recipe","title","calories","image","ingredients","className","style","recipe","map","text","src","alt","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","console","log","onSubmit","e","preventDefault","type","value","onChange","target","label","Math","floor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iQAkBeA,EAfA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,sBAAKC,UAAWC,IAAMC,OAAtB,UACE,oBAAIF,UAAWC,IAAMC,OAArB,SAA8BN,IAC9B,oBAAII,UAAU,cAAd,SACGD,EAAYI,KAAI,SAACJ,GAAD,OACf,6BAAKA,EAAYK,YAGrB,qBAAKC,IAAKP,EAAOQ,IAAI,GAAGN,UAAWC,IAAMH,QACzC,iDAAoBD,SCsDXU,G,MA/DH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OAOUJ,mBAAS,WAPnB,mBAOTK,EAPS,KAOFC,EAPE,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MANA,2CAAH,qDAsBhB,OACE,sBAAKtB,UAAU,MAAf,UACE,uBAAMyB,SARQ,SAACC,GACjBA,EAAEC,iBACFb,EAASH,GACTC,EAAU,KAKmBZ,UAAU,cAArC,UACE,uBACEA,UAAU,aACV4B,KAAK,OACLC,MAAOlB,EACPmB,SAnBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,OACnBN,QAAQC,IAAIb,MAmBR,wBAAQX,UAAU,gBAAgB4B,KAAK,SAAvC,uBAIF,qBAAK5B,UAAU,UAAf,SACGS,EAAQN,KAAI,SAACD,GAAD,OACX,cAAC,EAAD,CAEEN,MAAOM,EAAOA,OAAO8B,MACrBnC,SAAUoC,KAAKC,MAAMhC,EAAOA,OAAOL,UACnCC,MAAOI,EAAOA,OAAOJ,MACrBC,YAAaG,EAAOA,OAAOH,aAJtBG,EAAOA,OAAO8B,iBC3ChBG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,yB","file":"static/js/main.1f86d977.chunk.js","sourcesContent":["import React from 'react';\r\nimport style from './recipe.module.css';\r\n\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1 className={style.recipe}>{title}</h1>\r\n      <ul className='ingredients'>\r\n        {ingredients.map((ingredients) => (\r\n          <ul>{ingredients.text}</ul>\r\n        ))}\r\n      </ul>\r\n      <img src={image} alt='' className={style.image} />\r\n      <p>Total Calories: {calories}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './App.css';\n\nconst App = () => {\n  // ID and Key from api: https://developer.edamam.com/admin/applications/1409621039618\n  const APP_ID = '3ff71135';\n  const APP_KEY = 'b830afa1a8c195fd4a91a8d6a91e9c72';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('chicken');\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  //can access the target from this event, every time you run the onChange you get this event\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n    console.log(search);\n  };\n\n  //set the query equal to whatever is in the search, only updates after search button is hit\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  };\n\n  return (\n    <div className='App'>\n      <form onSubmit={getSearch} className='search-form'>\n        <input\n          className='search-bar'\n          type='text'\n          value={search}\n          onChange={updateSearch}\n        />\n        <button className='search-button' type='submit'>\n          Search\n        </button>\n      </form>\n      <div className='recipes'>\n        {recipes.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={Math.floor(recipe.recipe.calories)}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1px4R\",\"image\":\"recipe_image__146Ln\"};"],"sourceRoot":""}